exports.Tile = function( params ){

	var defaults = {

		/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
		/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
		/*
			PROPIEDADES DE COMUNICACION: Las propiedades con el prefijo _
			utilizan setters y getters para clonar el valor asignado a cada
			propiedad en una lista de valores modificados.
			Luego sera enviad apor socket.
		*/
		/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

		"_terrain"	: null,
		"_artifact"	: null,
		"_being"	: null,

	}

	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	/*
		SETTERS Y GETTERS
	*/
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	Object.defineProperty(this, 'terrain', {
		get: function() {
			return this._terrain;
		},
		set: function(value) {
			this._terrain = value;
			SERVER.queue({"user" : this.name , "property" : "terrain" , "value" : value });
		}
	});
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	Object.defineProperty(this, 'artifact', {
		get: function() {
			return this._artifact;
		},
		set: function(value) {
			this._artifact = value;
			SERVER.queue({"user" : this.name , "property" : "artifact" , "value" : value });
		}
	});
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	Object.defineProperty(this, 'being', {
		get: function() {
			return this._being;
		},
		set: function(value) {
			this._being = value;
			SERVER.queue({"user" : this.name , "property" : "being" , "value" : value });
		}
	});
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

	merge( defaults , params , this );

	// Agrega Elemento al tile ( terrain , object o being)
	this.append = function( params ){
		for(var type in params){
			this[type] = params[type];
		}

	}

	this.remove = function( params ){
		this[params.type] = null;
	}



}
