/*
	FRAMEWORK: FUNCIONES GENERALES
*/

/* MERGE: Mezcla de un objeto sobre un default */
exports.framework = function(){
	/*
	this.merge = function( origin , append , destiny ){
		var origin = origin || {};
		var append = append || {};
		this.setter_getter( origin );
		for( var o in origin ){
			if( append[o] instanceof Object ){
				destiny[o] = destiny[o] || {}
				this.merge( origin[o] , append[o] , destiny[o] )
			}else{
				destiny[o] = append[o] || origin[o];
			}
		}
		this.setter_getter( destiny );
		
		//test( destiny.position.x );
	}
	*/
	this.getKeys = function( params ){
		var keys = {};
		for( var o in params){
			for( key in params[o]){
				keys[key] = null;
			}
		}
		return keys;
	}

	this.merge = function( origin , append , destiny ){
		var origin; //= origin || {};
		var append;// = append || {};
		if( origin == undefined ) origin = {};
		if( append == undefined ) append = {};
		//test(origin)

		var allKeys = this.getKeys( [origin , append]);
		
		for( var o in allKeys ){
		if( origin.name == 'tierra') test('destiny'+append._position.x)
			if( append[o] instanceof Object ){
				if( destiny[o] == undefined ) destiny[o] = {};
				this.merge( origin[o] , append[o] , destiny[o] )
			}else{
				destiny[o] = append[o] || origin[o];
			}
		}

		
		//test( destiny.position.x );
	}

	this.extend = function( destiny , origin , params ){
		var origin = new origin( params );
		for( prop in origin ){
			destiny[ prop ] = origin[ prop ];
		}
	}

	this.createArray = function( dx , dy , Obj ){
		var newArray = [];
		for( var x = 0 ; x < dx ; x++ ){
			newArray[x] = [];
			for( var y = 0 ; y < dy ; y++ ){
				newArray[x][y] = new Obj;
			}
		}
		return newArray;
	}

	this.cloneObject = function( o ){
		var params = {};
		this.merge( o , params , params );
		var newObject = new o.constructor( params );
		return newObject;
	}

	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	/*                                                                    */
	/* SETTERS Y GETTERS                                                  */
	/*                                                                    */
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	/* Los setters y getters se generan automaticamente en los hijos      */
	/* despues de un merge sobre los atributos que comienzan con "_"      */
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

	this.setter_getter = function( o ){
		var Key = "";
		var _Key = "";
		for( var key in o ){
			if( key[0] == "_" && !(key.slice(1) in o)){
				_Key = key;
				Key = _Key.slice(1);
				Object.defineProperty(o, Key, {
					get: function() {
						return this[_Key];
					},
					set: function(value) {
						this[_Key] = value;
						SERVER.queue({"user" : this.name , "property" : Key , "value" : value });
					},
					enumerable:true
				});

				o[Key] = o[_Key];
			}
		}


		/*if( o._position ){
			test(o.name +':'+ o._position.x)
		}*/
	}

	// Encuentra una position en un array. function( array , position )
	/*
	this.findPositionInArray = function( params ) {
		var array = params.array;
		var position = params.position;
	    for (var i = 0; i < array.length; i++) {
	        if (array[i]["x"] === position.x && array[i]["y"] === position.y) {
	            return array[i];
	        }
	    }
	    return null;
	}*/
}
