/*
	FRAMEWORK: FUNCIONES GENERALES
*/

/* MERGE: Mezcla de un objeto sobre un default */
exports.framework = function(){

	this.getKeys = function( objects ){
		var allKeys = {};
		for( var o in objects){
			for( var key in objects[o]){
				allKeys[key] = null;
			}
		}
		return allKeys;
	}

	this.merge = function( base , added , merged ){
		var base = base || {};
		var added = added || {};
		var keys = getKeys( [ base , added ]);
		for( key in keys){

			if(added[key] instanceof Object || base[key] instanceof Object){
				base[key] = base[key] || {};
				added[key] = added[key] || {};
				merged[key] = merged[key] || {};
				merge( base[key] , added[key] , merged[key] );
			}else{
				merged[key] = added[key] || base[key]
			}
		}
		setters_getters( this );
	}

	this.extend = function( destiny , origin , params ){
		var origin = new origin( params );
		for( prop in origin ){
			destiny[ prop ] = origin[ prop ];
		}
	}

	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	/*                                                                    */
	/* SETTERS Y GETTERS                                                  */
	/*                                                                    */
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	/* Los setters y getters se generan automaticamente en los hijos      */
	/* despues de un merge sobre los atributos que comienzan con "_"      */
	/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


	this.setter_getter = function( o ){
		var key;
		for( var _key in o ){
			if( _key[0] == "_" ){

				key = _key.slice(1);
				
				Object.defineProperty( o , key , {
					get:
					(function(_key){
					return function() { return this[_key]; }
					})(_key),

					set:
					(function(_key){
						return function( value ) { this[_key] = value; }
					})(_key),

					enumerable: true,
					configurable: true
				});
				this[key] = this[_key];
			}
		}
	}

	this.createArray = function( dx , dy , Obj ){
		var newArray = [];
		for( var x = 0 ; x < dx ; x++ ){
			newArray[x] = [];
			for( var y = 0 ; y < dy ; y++ ){
				newArray[x][y] = new Obj;
			}
		}
		return newArray;
	}

	this.cloneObject = function( o ){
		var params = {};
		this.merge( o , params , params );
		var newObject = new o.constructor( params );
		return newObject;
	}

	// Encuentra una position en un array. function( array , position )
	/*
	this.findPositionInArray = function( params ) {
		var array = params.array;
		var position = params.position;
	    for (var i = 0; i < array.length; i++) {
	        if (array[i]["x"] === position.x && array[i]["y"] === position.y) {
	            return array[i];
	        }
	    }
	    return null;
	}*/
}
