console.log('CONTROLLERS CARGADAS -> OK');


//------------------------------------------------------------------------------------------------
// Recibe del cliente
//------------------------------------------------------------------------------------------------
io.sockets.on("connection",function(socket){

	//------------------------------------------------------------------------------------------------
	// LOGIN
	//------------------------------------------------------------------------------------------------
	socket.on("login",function( personaje ){

		pj = new User();
		pj.nombre = personaje.nombre;
		pj.posicionar();

		users[ pj.nombre ] = pj;

		console.log( users );

		// Nombro la conexion con su NOMBRE.
		socket.user = pj.nombre;

		// Login Success, devuelvo Objeto User con datos moldeados. (id asignado por ej.)
		socket.emit( "login_ok" , pj );

		// Aparece el User en el MUNDO.
		io.sockets.emit( "actualizar_users" , users );

	})



	//------------------------------------------------------------------------------------------------
	// KEYPRESSED controller
	//------------------------------------------------------------------------------------------------
	socket.on("keyPressed",function(character){
		id = socket.user;
		// Utiliza controls

		// Recorre Acciones
		for( action in config.controls ){
			// Recorre keynames
			for( keyname in config.controls[action] ){
				// Si apreto una de esas teclas ejecuta la funcion del keyname.
		   		c = config.controls[action][keyname];
		   		if( character == c ){
		   			config.controls[action].fn( keyname , id );
		   		}
			}
		}
	})

	//------------------------------------------------------------------------------------------------
	// KEYPRESSED controller
	//------------------------------------------------------------------------------------------------
	socket.on("gravityMotion",function( pos ){
		id = socket.user;
		console.log('se mueve: '+id)
		users[id].pos.x -= pos.gx;
		users[id].pos.y -= pos.gy;
		// Recorre Acciones
		io.sockets.emit("actualizar_pos",users)
	})


	//------------------------------------------------------------------------------------------------
	// LOGOUT
	//------------------------------------------------------------------------------------------------
	socket.on('disconnect', function (){
		//users.splice(socket.user , 1);
		delete users[ socket.user ]
		io.sockets.emit("actualizar_users",users)
	})
})