// Cargo clases
var User = require('class/User.js').User;
var Users = require('class/Users.js').Users;
var Server = require('class/Server.js').Server;

// Users conectados
global.USERS = new Users();
global.SERVER = new Server();

exports.userController = function( socket ){

	// Cada vez que un user quiera conectar.
	get_date();

	//------------------------------------------------------------------------------------------------
	// LISTENERS SERVER
	//------------------------------------------------------------------------------------------------

	socket.on( "disconnect" , disconnect );
	//socket.on( "connect" , connect );

	function disconnect( params ){

		console.log( "desconectado" , params );
		var disconnected_user = USERS.getByUsername({ "username" : socket.username });
		if( disconnected_user ){
			USERS.disconnect({ "user" : disconnected_user });
			console.log( USERS );
		}else{
			console.log( 'Ya se hab√≠a borrado' );
		}

	}

	function get_date(){
		socket.emit( 'get_client_date' , null );
	}


	//------------------------------------------------------------------------------------------------
	// RECIBE DEL CLIENT
	//------------------------------------------------------------------------------------------------
	socket.on( "user_login" , user_login );
	socket.on( "user_logout" , user_logout );
	socket.on( "check_date" , check_date );

	function user_login( params ){

		// le asigno un nombre al socket ( para cuando se desconecta, etc. )
		socket.username = params.user.username;
		// Creo usuario con el nombre, y le asigno el socket actual
		var user = new User({ "username" : params.user.username , "socket" : socket });

		if( user ){
			if( USERS.connect({ "user" : user }) ){
				console.log( USERS );
				var data = { "success" : true };
				socket.emit( 'user_login' , data );

				// Envia data del world al cliente
				SERVER.initClient(); 
			}
		}
		
	}


	function user_logout( params ){
		var user = params.user;
		USERS.disconnect({ "user" : user });
		console.log( USERS );
	}

	function check_date( params ){
		console.log('Un user se quiere conectar')
		// Si el cliente tiene una conexion anterior al inicio del server, le dice que refresque.
		if( params.startDate < SERVER.startDate ){
			socket.emit( 'old_server' , null );
			return false;
		}
	}

}

console.log('userController -> OK');