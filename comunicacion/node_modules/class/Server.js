//------------------------------------------------------------------
// Server
//------------------------------------------------------------------

// SERVER

exports.Server = function(){
var totalBytes = 0;
	// Fecha de inicio del server.
	this.startDate = (new Date()).getTime()-10000;

	// Lista de datos que le pasa a los users
	this.queueList = [];
	this.refreshTime = 66; 	//	66 = 15 fps | 33 = 30 fps
	/*
		Being.move()
		Being.isAffected();
	*/

	this.initClient = function( params ){
		// Creo Being del usuario en el server ( le asigno el id del user )
		world.createBeing({ "userId" : params.userId });

		// Le envio el world al cliente.
		var data = { "world" : world };
		params.socket.emit( 'init_client' , data );
	}

	// Agrega a la cola de informacion que manda al user.
	this.queue = function( params ){
		this.queueList.push( params );
	}


	this.queueCommit = function(){
		if( this.queueList.length == 0) return;
		var data = {};
		data.queue = [];
		for( var item in this.queueList ){
			// Envia datos a todos los conectados.
			/*for( var u in USERS.users ){
				USERS.users[u].socket.emit( 'world_update' , data );
			}*/
			data.queue.push( this.queueList[item] );
		}

		io.sockets.emit('world_update' , data );
		//totalBytes += roughSizeOfObject(this.queueList);
		this.queueList = [];
	}

	// Funciones por cliente
	this.askDrop = function( params ){
		USERS.getSocket( params ).emit('ask_drop');
	}


	this.refresh = setInterval( this.queueCommit.bind(this) , this.refreshTime );
	//setInterval(function(){test('Bandwidth');console.log(Math.ceil(totalBytes*8/1000) + "Kb/s");totalBytes = 0},1000)
	/*setInterval(function(){
		for( var u in USERS.users ){
			USERS.users[u].socket.emit( 'ping' , {"fecha" : (new Date()).getMilliseconds() } );
		}
	},1000)
*/
}

console.log('Clase Server -> OK');
